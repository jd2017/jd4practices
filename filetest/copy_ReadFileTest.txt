Reader:
用于读取字符流的抽象类。
直接已知子类：
	BufferedReader, CharArrayReader, FilterReader, InputStreamReader, PipedReader, StringReader 

abstract  void close() 
          关闭该流并释放与之关联的所有资源。 
 void mark(int readAheadLimit) 
          标记流中的当前位置。 
 boolean markSupported() 
          判断此流是否支持 mark() 操作。 
 int read() 
          读取单个字符。 
 int read(char[] cbuf) 
          将字符读入数组。 
abstract  int read(char[] cbuf, int off, int len) 
          将字符读入数组的某一部分。 
 int read(CharBuffer target) 
          试图将字符读入指定的字符缓冲区。 
 boolean ready() 
          判断是否准备读取此流。 
 void reset() 
          重置该流。 
 long skip(long n) 
          跳过字符。 

类 FileReader:
用来读取字符文件的便捷类。此类的构造方法假定默认字符编码和默认字节缓冲区大小都是适当的。
要自己指定这些值，可以先在 FileInputStream 上构造一个 InputStreamReader。 

FileReader(File file) 
          在给定从中读取数据的 File 的情况下创建一个新 FileReader。 
FileReader(FileDescriptor fd) 
          在给定从中读取数据的 FileDescriptor 的情况下创建一个新 FileReader。 
FileReader(String fileName) 
          在给定从中读取数据的文件名的情况下创建一个新 FileReader。 



public class FileReaderDemo {
	private static void readerChar() {
		FileReader fr=null;
		try{
			fr=new FileReader("D://Workspaces//src//Demo.txt");
		
			//记录读取单个字符
			int num=0;
			while((num=fr.read())!=-1)
				System.out.println((char)num);
		}catch(Exception e){
			e.printStackTrace();
		}
		finally{
			try{
				if(fr!=null)
					fr.close();
			}catch(Exception e){
				e.printStackTrace();
			}
		}
	}
	private static void readerChars() throws Exception{
		FileReader fr=null;
		fr=new FileReader("D://Workspaces//src//Caculator.java");
		//定义一个字符 容器数组 ，存储读取后的字符
		char[] chs=new char[4];
		//读取的字符个数。
		int num=0;		
		while((num=fr.read(chs))!=-1)
			System.out.print(new String(chs,0,num));//最好不要换行，否则超过容器后就会换行。
		fr.close();
	}
	public static void main(String[] args) throws Exception {
		readerChars();
	}
}