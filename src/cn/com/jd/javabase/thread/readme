进程：是一个正在执行的程序。
	每个进程都有一个执行顺序，该顺序是一个执行路径，或者一个控制单元。
	线程：就是进程中的一个独立的控制单元。线程在控制着进程的执行。
	一个进程中至少有一个线程。
	java jvm 启动的时候会有一个进程java.exe.
	进程至少一个线程负责java程序的执行。而且这个线程运行代码在main方法中。
	该线程称之为主线程。
	扩展：其实java jvm启动不止一个线程，还有负责垃圾回收机制的线程。否则，会出现内存溢出。
	
	1，如何自定义一个线程？
	*Thread:用于描述线程，
		该类有一个功能用于存储线程要运行的代码，该存储功能就是run方法!!!
	方法一：
	1，继承Thread类。
	2，复写Thread 类中的run();
		目的：将自定义代码存储在run方法。让线程运行。
	3，调用start(), 作用：启动多线程，调用run方法。
	
	多线程时，cpu执行到谁，谁就运行。
	多线程的随机性。
	Thread-编号  该编号从0开始。	栈中局部变量在每一个线程中都有一份。
	static Thread.currentThread():获取当前线程对象。通过此方法检测是否启动该线程。
	getName():	获取线程名称。
	设置线程名称： setName或者复写父类构造函数。
	
	优先级：1-10；默认为5；可以通过setPriority设置。
	MAX_PRIORITY :最高优先级：(10)
	MIN_PRIORITY :最低优先级(1);
	NORM_PRIORITY:分配给线程的默认优先级。(5)
	
	yield：暂停当前正在执行线程的对象，并执行其他线程。
	Thread.yield();
	
二、创建线程的第二种方式：实现Runnable接口
	步骤：
	1，定义实现Runnable接口
	2，覆盖Runnable接口中的run方法。
		将线程要运行的代码存放在run方法中。
	
	3，通过Thread类建立对象。
	4，将Runnable接口的子类对象作为实际参数传递给Thread类的构造函数。
		为什么要将Runnable接口的子类对象传递给Thread的构造函数？
		因为，自定义的run方法所属的对象是Runnable接口的子类对象。
		所以要让线程去执行指定对象的Run方法。就必须明确该run方法所属对象。
	
	5，调用Thread类的start方法开启线程并调用Runnable接口子类的run方法。
	
	实现方式和继承方式的主要区别？
	
	继承Thread: 线程代码存放Thread子类run方法中。
	实现Runnable，线程代码存放在接口的子类的run放法中。
	
	好处：实现方式避免单继承的局限性。建议使用实现。
	
	Thread类也实现了Runnable， 
	Runnable的定义就是在确立线程代码所存放的位置。
	
三、多线程的运行出现安全问题：
	当多条语句在操作同一个共享数据时，一个线程对多条语句只执行了一部分，还没执行完。
	另一个线程参与进来执行，导致共享数据的错误。
	解决办法：
		对多条操作共享数据的语句，只能让一个线程都执行完。在执行过程中其他线程不可以参与。
	
	java 中对于多线程问题：
	用同步代码块。
	synchronized(对象){
		需要同步的代码块；
	}
	对象如同锁。持有锁的线程可以在同步中执行。
	没有持有锁的线程即使获取cpu的执行权，也进不去，因为没有获取锁。
	
	同步的前提： (NotifyThreadDemo.java)
	1，必须要有两个或者两个以上的线程。
	2，必须是多个线程使用同一个锁。
	
	线程通讯：
	其实就是多个线程在操作同一个资源。
	但是操作的动作不同。
	
	/*
	wait
	notify
	notifyAll
	都使用在同步中，因为要对持有监视器(锁)的线程操作。
	所以要使用在同步中，因为只有同步才具有锁。
	
	这些方法都定义在Object中?
	因为这些方法在操作同步中线程时，都必须要标识他们所操作线程持有的锁。
	同一个锁上的被等待线程，可以被同一个锁上notify唤醒。
	不可以对不同锁上的线程进行唤醒。
	
	等待和唤醒都必须是同一把锁。
	
	锁可以是任意对象，所以可以被任意对象调用的方法定义object类中。
	
	必须保证同步中只能有一个线程在运行。
	好处：解决了多线程的安全问题。
	弊端：多个线程需要判断锁，比较消耗资源。
	
	 如何找问题：
	 1，明确哪些代码是多线程运行代码.
	 2, 明确共享数据。
	 3，明确多线程运行代码中哪些语句是操作共享数据的。
	 
	同步函数用的哪一个锁？(Ticket2.java)
	函数需要被对象调用，那么函数都有一个所属对象引用，就是this。
	所以同步函数使用的琐是this。
	
	如果同步函数被静态修饰时，对象不是this，因为静态方法不可以定义this对象。
	 静态进内存时，内存中没有本类对象，但是一定有该类对应的字节码文件对象。
	 类名.class	该对象的类型是class
	 静态的同步方法，使用的锁是该方法所在类的字节码文件对象。
	同步函数使用的锁为this：
	
四、(NotifyAllDemo.java) Lock实现提供了比使用 synchronized 方法和语句可获得的更广泛的锁定操作此实现允许更灵活的结构，
	可以具有差别很大的属性，可以支持多个相关的 Condition 对象。 
	锁定和取消锁定出现在不同作用范围中时，必须谨慎地确保保持锁定时所执行的所有代码用 try-finally 或 try-catch 加以保护，以确保在必要时释放锁。 
	Lock 实现提供了使用 synchronized 方法和语句所没有的其他功能，
		包括提供了一个非块结构的获取锁尝试 (tryLock())、一个获取可中断锁的尝试 (lockInterruptibly()) 和一个获取超时失效锁的尝试 (tryLock(long, TimeUnit))。 
	
	Lock 类还可以提供与隐式监视器锁完全不同的行为和语义，如保证排序、非重入用法或死锁检测。如果某个实现提供了这样特殊的语义，则该实现必须对这些语义加以记录。
	
	Lock：
	
	JDK1.5中提供了多线程升级解决方案。  显示的唤醒机制，以及唤醒操作机制。
	将同步  Synchronized  替换为现实 Lock 操作。
	将Object中的 wait，notify notifyAll，替换了Condition对象。
	该对象可以通过Lock锁，进行获取。
	释放锁一定要执行。
	
	该实例中实现了本方只唤醒对方的操作。
	
	Condition 将 Object 监视器方法（wait、notify 和 notifyAll）分解成截然不同的对象，
	以便通过将这些对象与任意 Lock 实现组合使用，为每个对象提供多个等待 set（wait-set）。
	其中，Lock 替代了 synchronized 方法和语句的使用，Condition 替代了 Object 监视器方法的使用。 

五、停止线程
	1，只要控制住循环，就可以让run方法结束，也就是线程结束。
	2，特殊情况：
	当线程处于冻结状态。
	就不会读取到标记，那么线程就不会结束。
	当没有指定的方式让冻结的线程恢复到运行状态时，这时需要对冻结进行解除。
	强制让线程恢复到运行状态中来，
	就这样可以操作标记让线程结束。
	Thread类中提供的的方法 interrupt();
	3，setDaemon(boolean on) 
	          将该线程标记为守护线程或用户线程。
	4，第四种：
		join()：	临时加入线程执行。 
		获取main线程执行权 ，等待该线程终止；释放执行权。

