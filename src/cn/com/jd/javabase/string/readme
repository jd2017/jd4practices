一、基本类型与引用类型
	基本数据类型对象包装
	byte	Byte
	short	Short
	int		Integer
	long	Long
	float	Float
	double	Double
	char	Character
	boolean	Boolean
	
	基本数据类型对象包装类的最常见作用
	基本数据类型转成字符串
		基本数据类型+""
		基本数据类型.toString(基本数据类型)；
		如果： Integer.toString(34);//将34整数变成"34"
	字符转成基本数据类型
	静态的：
		int i=Integer.parseInt(String);
		double b= Double.parseDouble("12.34");
		boolean b=Boolean.parseBoolean("true");
		char：没有此转换，以为char本身就是一个字符。
	-----------------------------------------------------
	非静态的：
		Integer i=new Integer("123");
		int in=i.intValue();
	
	十进制转成其他进制
		toBinaryString();
		toHexString();
		toOctalString();
	
	其他进制转成十进制。
		parseInt(String,radix);
		例如
		parseInt("110",10);	//110
		parseInt("110",2);	//6
		parseInt("3c",16);	//60
	
	JDK 1.5 出现的新特性：
		Integer x=new Integer(4);
		Integer x=null;// 自动装箱。//new Integer(4)
		x=x /*x.inValue()*/ +2； //x+2 进行在动拆箱，运算后自动装箱。
	
		Integer m=128;
		Integer n=128;
		
		sop(n==m);//false;
	
		Integer m=127;
		Integer n=127;
		sop(m==n);//结果true。因为a和b指向了同一个Integer对象。
			因为数值在byte范围内容，对于新特性，
			如果该数值已经存在，则不会开辟新的空间。
			
二、String 字符串
	String: 用于描述字符串事物。
	最大特点：一旦初始化就不可以改变。定长固定。
	String 复习Object类中的 equals()方法； 该方法用于判断字符串是内容否相同；
	常见操作：
	"abcd"
	
	1, 获取。
		1.1 字符串中的包含的字符数，也就是字符串的长度。
			int length() : 获取长度。
		1.2 根据位置获取位置上某个字符。
			char charAt(int index);
		1.3 根据字符获取该字符串中的位置。
			int indexOf(int ch)：返回ch在字符串中第一次出现的角标位置，ch 以 Unicode 代码单元表示。
			int indexOf(int ch, int fromIndex):从fromIndex指定角标位置开始，获取ch在字符串中出现的角标位置。
			int indexOf(String str):返回str字符串中第一次出现的角标位置。
			int indexOf(String str,int fromIndex):从fromIndex指定角标位置开始，获取str在字符串中出现的位置。
			int lastIndexOf(int ch): 字符在此字符串中最后一次出现处的索引。
	2, 判断：
		2.1 字符是否包含字符串。
			boolean contains(str):
			特殊之处：indexOf(str):可以索引str第一次出现位置，如果返回-1，表示该str不在字符串中存在。
				所以，也可以用于对指定判断是否包含。
				if(str.indexOf("abc")!=-1)
				而且该方法既可以判断，又可以获取出现的位置。
		2.2 字符是否有内容。
			boolean isEmpty(): 原理判断长度是否为0.
		2.3 字符串是否以指定内容开头。
			boolean startsWith(str);
		2.4 返回字符串是否是以指定内容结尾。
			boolean endsWith(str);
		2.5 判断字符串内容是否相同，复写了Object类中的equals方法。
			boolean equals(str);
		2.6 判断内容是否相同，并且忽略大小写。
			boolean equalsIgnoreCase();
	3，转换：
		3.1 将字符数组转成字符串。
		    构造函数：String(char[])
				String(char[],offset,count):将字符数组中的一部分转化为字符串。
		    静态方法：
				static String copyValueOf(char[]);
				static String copyValueOf(char[] data,int offset,int count)
				static String valueOf(char[])
		3.2 将字符串转换成字符数组。
		    char[] toCharArray();
		3.3 将字节数组转换成字符串。
			构造函数：String(byte[])
				String(byte[],offset,count):将字节数组中的一部分转化为字符串
		3.4 将字符串转成字节数组。
		    byte[] getBytes();
			unicode编码		有汉字时用char[] 取出来，
		3.5 将基本数据类型转成字符串。
		    static String valueOf(int)
		    static String valueOf(double)
		    //3+"" ==String.valueOf(3);
		  特殊：字符串和字节数组在转换过程中，是可以指挥编码表的。
		3.6 字符串转成 基本数据类型。
			Integer.parseInt(String);
	4，替换：
		String	replace(oldchar , newchar);			字符替换
		String	replace(CharSequence target, CharSequence replacement) : 字符串替换。 若要内容没有，还是原来字符串。
		String	replaceAll(String regex, String replacement)		：正则替换
	5,切割：
		String[] split(regex);
	6, 子串，获取字符串中的一部分。
		String substring(int begin);		//指定位置开始到结尾.若角标不存在， 会出现角标越界。
		String substring(int begin，int end);	//包含头，不包含尾。s.subString(0,s.length());	
	7，转换，去除空格，比较。
		7.1 将字符串转成大写或者小写。
		    String toUpperCase();
		    String toLowerCase();
		7.2 将字符串两端的多个空格去除。
			String.trim();
		7.3  对两个字符串进行自然顺序的比较。
			int compareTo(String);  该比较基于字符串中各个字符的 Unicode 值。负数、零、整数。
			
三、StringBuffer 是一个容器。线程安全的可变字符序列。
	特点：
	1，长度是可以变化的。
	2，可以字节操作多个数据类型。	数组只能操作一种类型。
	3，最终会通过toString方法变成字符串。
	c create r read u update d delete
	1，存储。
		StringBuffer append():将指定数据作为参数添加到尾部。
		StringBuffer insert(index,数据)：将数据插到指定的 index处。
	2，删除
		StringBuffer delete(int start, int end);删除缓冲数据，包含start，不含end；
		StringBuffer deleteCharAt(int index);  删除指定位置的字符。	
		sb.delete(0, sb.length()); //清空缓冲区；
	3，获取
		char charAt(int index)；
		int indexOf(String str)		//获取字符角标位置，若没有 返回-1；
		int indexOf(String str, int fromIndex) 
		int lastIndexOf(String str) 
		int length() 
		void setCharAt(int index, char ch) 
		subSequence(int start, int end) 
		String substring(int start, int end)		返回是String类
		String toString() 
	4，修改(替换)。
		StringBuffer reverse() 
		StringBuffer replace(int start, int end, String str) 
		void		setCharAt(int index, char ch)		返回为void
	 5，反转：
		StringBuffer reverse() 
	6， 将缓冲区中的数据存储在指定字符数组中。
		void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)
	JDK1.5 版本之后出现了StringBuilder。
	StringBuffer是线程同步。
	StringBuilder是多个线程是不安全的。
	
	升级三个因素：
	1，提高效率
	2，简化书写
	3，提高安全性。
	
四、类 Pattern
	正则表达式的编译表示形式。 

	字符 
	x 字符 x 
	\\ 反斜线字符 
	\t 制表符 ('\u0009') 
	\n 新行（换行）符 ('\u000A') 
	\r 回车符 ('\u000D') 
	
	字符类 
	[abc] a、b 或 c（简单类） 
	[^abc] 任何字符，除了 a、b 或 c（否定） 
	[a-zA-Z] a 到 z 或 A 到 Z，两头的字母包括在内（范围） 
	[a-d[m-p]] a 到 d 或 m 到 p：[a-dm-p]（并集） 
	[a-z&&[def]] d、e 或 f（交集） 
	
	预定义字符类 
	. 任何字符（与行结束符可能匹配也可能不匹配） 
	\d 数字：[0-9] 
	\D 非数字： [^0-9] 
	\s 空白字符：[ \t\n\x0B\f\r] 
	\S 非空白字符：[^\s] 
	\w 单词字符：[a-zA-Z_0-9] 
	\W 非单词字符：[^\w] 
	
	边界匹配器 
	^ 行的开头 
	$ 行的结尾 
	\b 单词边界 
	\B 非单词边界 
	
	Greedy 数量词 
	X? X，一次或一次也没有 
	X* X，零次或多次 
	X+ X，一次或多次 
	X{n} X，恰好 n 次 
	X{n,} X，至少 n 次 
	X{n,m} X，至少 n 次，但是不超过 m 次 
	
	static Pattern compile(String regex) 
	          将给定的正则表达式编译到模式中。 
	Matcher matcher(CharSequence input) 
	          创建匹配给定输入与此模式的匹配器。 
	String[] split(CharSequence input) 
	          围绕此模式的匹配拆分给定输入序列。 
	
	类 Matcher
		通过解释 Pattern 对 character sequence 执行匹配操作的引擎。 
		通过调用模式的 matcher 方法从模式创建匹配器。
	boolean find() 
	          尝试查找与该模式匹配的输入序列的下一个子序列 
	String group() 
	          返回由以前匹配操作所匹配的输入子序列 
	boolean matches() 
	          尝试将整个区域与模式匹配 
	int end() 
	          返回最后匹配字符之后的偏移量 
	int start() 
	          返回以前匹配的初始索引。 
	String replaceAll(String replacement) 
	          替换模式与给定替换字符串相匹配的输入序列的每个子序列。
	String replaceFirst(String replacement) 
	          替换模式与给定替换字符串匹配的输入序列的第一个子序列。 